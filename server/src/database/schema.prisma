generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL")
}

generator nestgraphql {
    provider = "node node_modules/prisma-nestjs-graphql"
    output = "../../src/api/@generated"

    decorate_1_type = "*CommentThreadTargetCreateNestedManyWithoutCommentThreadInput"
    decorate_1_field = "!(createMany)"
    decorate_1_name = "HideField"
    decorate_1_from = "@nestjs/graphql"
    decorate_1_arguments = "[]"

    decorate_2_type = "*CommentCreateNestedManyWithoutCommentThreadInput"
    decorate_2_field = "!(createMany)"
    decorate_2_name = "HideField"
    decorate_2_from = "@nestjs/graphql"
    decorate_2_arguments = "[]"

    decorate_3_type = "*UserCreateNestedOneWithoutCommentsInput"
    decorate_3_field = "!(connect)"
    decorate_3_name = "HideField"
    decorate_3_from = "@nestjs/graphql"
    decorate_3_arguments = "[]"

    decorate_4_type = "*CommentThreadCreateNestedOneWithoutCommentsInput"
    decorate_4_field = "!(connect)"
    decorate_4_name = "HideField"
    decorate_4_from = "@nestjs/graphql"
    decorate_4_arguments = "[]"

    decorate_5_type = "!(*Aggregate*|*GroupBy*|*OrderBy*)"
    decorate_5_field = "_count"
    decorate_5_name = "HideField"
    decorate_5_from = "@nestjs/graphql"
    decorate_5_arguments = "[]"
}

model User {
  id              String           @id
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  lastSeen        DateTime?
  disabled        Boolean          @default(false)
  displayName     String
  email           String           @unique
  avatarUrl       String?
  locale          String
  phoneNumber     String?
  passwordHash    String?
  emailVerified   Boolean          @default(false)
  metadata        Json?
  /// @TypeGraphQL.omit(input: true)
  workspaceMember WorkspaceMember?
  companies       Company[]
  /// @TypeGraphQL.omit(input: true, output: true)
  refreshTokens   RefreshToken[]
  comments        Comment[]

  @@map("users")
}

/// @TypeGraphQL.omit(input: true)
model Workspace {
  id              String            @id
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  domainName      String            @unique
  displayName     String
  logo            String?
  workspaceMember WorkspaceMember[]
  companies       Company[]
  people          Person[]
  commentThreads  CommentThread[]
  comments        Comment[]
  pipelines       Pipeline[]
  pipelineStages  PipelineStage[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String    @id
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  /// @TypeGraphQL.omit(input: true, output: true)
  workspaceId String
  /// @TypeGraphQL.omit(input: true, output: true)
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("workspace_members")
}

model Company {
  id             String    @id
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  name           String
  domainName     String
  address        String
  employees      Int?
  accountOwnerId String?
  accountOwner   User?     @relation(fields: [accountOwnerId], references: [id])
  people         Person[]

  /// @TypeGraphQL.omit(input: true, output: true)
  workspaceId    String
  /// @TypeGraphQL.omit(input: true, output: true)
  workspace      Workspace @relation(fields: [workspaceId], references: [id])

  @@map("companies")
}

model Person {
  id          String    @id
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  firstname   String
  lastname    String
  email       String
  phone       String
  city        String
  companyId   String?
  company     Company?  @relation(fields: [companyId], references: [id])

  /// @TypeGraphQL.omit(input: true, output: true)
  workspaceId String
  /// @TypeGraphQL.omit(input: true, output: true)
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("people")
}

model RefreshToken {
  id           String    @id
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  refreshToken String
  userId       String
  user         User      @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model CommentThread {
  id                    String                @id
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
  commentThreadTargets  CommentThreadTarget[]
  comments              Comment[]
  /// @TypeGraphQL.omit(input: true, output: true)
  workspaceId           String
  /// @TypeGraphQL.omit(input: true, output: true)
  workspace             Workspace @relation(fields: [workspaceId], references: [id])

  @@map("comment_threads")
}

model Comment {
  id               String        @id
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime?
  body             String
  authorId         String
  author           User          @relation(fields: [authorId], references: [id])
  commentThreadId  String
  commentThread    CommentThread @relation(fields: [commentThreadId], references: [id])
  /// @TypeGraphQL.omit(input: true, output: true)
  workspaceId      String
  /// @TypeGraphQL.omit(input: true, output: true)
  workspace        Workspace @relation(fields: [workspaceId], references: [id])

  @@map("comments")
}

enum CommentableType {
  Person
  Company
}

model CommentThreadTarget {
  id               String        @id
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime?
  commentThreadId  String
  commentThread    CommentThread @relation(fields: [commentThreadId], references: [id])

  commentableType  CommentableType
  commentableId    String

  @@map("comment_thread_targets")
}

model Pipeline {
  id                    String                @id
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?

  name                  String
  icon                  String
  pipelineStages        PipelineStage[]
  pipelineAssociations  PipelineAssociation[]
  /// @TypeGraphQL.omit(input: true, output: true)
  workspaceId           String
  /// @TypeGraphQL.omit(input: true, output: true)
  workspace             Workspace @relation(fields: [workspaceId], references: [id])

  @@map("pipelines")
}

model PipelineStage {
  id                    String                @id
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?

  name                  String
  type                  String
  color                 String

  pipelineId            String
  pipeline              Pipeline @relation(fields: [pipelineId], references: [id])
  
  pipelineAssociations  PipelineAssociation[]

  /// @TypeGraphQL.omit(input: true, output: true)
  workspaceId           String
  /// @TypeGraphQL.omit(input: true, output: true)
  workspace             Workspace @relation(fields: [workspaceId], references: [id])

  @@map("pipeline_stages")
}

enum PipelineAssociableType {
  Person
  Company
}

model PipelineAssociation {
  id                    String                @id
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?

  pipelineId            String
  pipeline              Pipeline @relation(fields: [pipelineId], references: [id])

  pipelineStageId       String
  pipelineStage         PipelineStage @relation(fields: [pipelineStageId], references: [id])

  associableType        PipelineAssociableType
  associableId          String

  @@map("pipeline_associations")
}
